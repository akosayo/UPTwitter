Тут, собственно говоря, команды, чтобы продемонстрировать работу функционала. Вводить в консоли, по порядку.

// Эти две строки необходимы для инициализации всяких штук.
// Кроме того, inspector поддерживает текущего залогиненого пользователя, который изначально установлен в [Logged off].
var manager = new PostManager(posts);
var inspector = new Inspector(manager, new Author());

// Имитируем логин юзера. После этого один или несколько постов, которые написаны нашим залогиненым автором, должны стать доступны для редактирования и удаления.
inspector.changeUser(authors[2]);

// Чистим все посты, чтобы было нягляднее показать остальные функции.
inspector.clear();


// Добавим три поста. Они будут сразу же отсортированы по времени.
inspector.addPost(new Post(34, "Первый добавленный пост.", new Date("2019-01-25T20:41:36"), authors[6], ["add-1-hashtag-1"], []));
inspector.addPost(new Post(35, "Второй добавленный пост.", new Date("2018-04-20T10:50:25"), authors[2], ["add-2-hashtag-1", "add-2-hashtag-2", "add-2-hashtag-3"], [authors[5], authors[2]]));
inspector.addPost(new Post(36, "Третий добавленный пост.", new Date("2017-10-17T04:50:51"), authors[2], ["add-3-hashtag-1", "add-3-hashtag-2"], [authors[1], authors[4]]));


// Теперь отредактируем "Второй добавленный пост" (пост с ID 35).
inspector.editPost(35, {"text": "Мы изменили второй пост и теперь он выглядит иначе.", "hashtags": ["EDIT-HASHTAG-1", "EDIT-HASHTAG-2"]});

// Теперь удалим "Третий добавленный пост" (пост с ID 36).
inspector.removePost(36);

// Ну тут демонстрация того, что мы не можем удалить пост, не принадлежащий нам, хотя не знаю, зачем это. 
inspector.removePost(34);

// А теперь логофнемся.
inspector.changeUser(new Author());