class Inspector {
    _manager;
    _user;

    constructor(manager, user = new Author()) {
        this._manager = manager;
        this._user = user;
        this.drawUser();
        this.drawPosts(this._manager.getPage());
    }

    drawPosts(posts = []) {

        var postsDiv = document.getElementById("POSTS");

        while (postsDiv.firstChild) {
            postsDiv.removeChild(postsDiv.firstChild);
        }

        posts.forEach(post => {
            var newPost = document.createElement("div");
            newPost.className = "post";
            postsDiv.appendChild(newPost);
            
            var postPhotoInfo = document.createElement("div");
            postPhotoInfo.className = "post-photoinfo";
            newPost.appendChild(postPhotoInfo);

            var photo = document.createElement("img");
            photo.className = "post-photo";
            photo.src = post.author.photoLink;
            postPhotoInfo.appendChild(photo);

            var info = document.createElement("div");
            info.className = "post-info";
            postPhotoInfo.appendChild(info);

            var infoTime = document.createElement("div");
            infoTime.className = "post-info-time";
            infoTime.innerHTML = post.date;
            info.appendChild(infoTime);

            var infoName = document.createElement("div");
            infoName.className = "post-info-name";
            infoName.innerHTML = post.author.name;
            info.appendChild(infoName);

            var text = document.createElement("div");
            text.className = "post-text";
            text.innerHTML = post.text;
            newPost.appendChild(text);

            var hashButtons = document.createElement("div");
            hashButtons.className = "post-hashbuttons";
            newPost.appendChild(hashButtons);

            var postHash = document.createElement("div");
            postHash.className = "post-hash";
            hashButtons.appendChild(postHash);

            var hashes = document.createElement("div");
            var resultHash = "";
            post.hashtags.forEach(hashtag => {
                resultHash += ('#' + hashtag + ' ');
            });
            hashes.innerHTML = resultHash;
            postHash.appendChild(hashes);

            var dropdown = document.createElement("div");
            dropdown.className = "post-hash-dropdown";
            dropdown.innerHTML = resultHash;
            postHash.appendChild(dropdown);

            if (post.author.id == this._user.id) {
                var remove = document.createElement("button");
                remove.className = "post-delete";
                remove.innerHTML = "üóë";
                hashButtons.appendChild(remove);

                var edit = document.createElement("button");
                edit.className = "post-edit";
                edit.innerHTML = "‚úè";
                hashButtons.appendChild(edit);
            }

            var like = document.createElement("button");
            like.className = "post-like";
            like.innerHTML = post.likes.length + " ‚ù§";
            hashButtons.appendChild(like);
        });
    }

    drawUser() {
        if (this._user.id == 0) {
            document.getElementById("NEW-POST-WRAPPER").style.display = "none";
            document.getElementById("SIGN-TEXT").style.display = "none";
            document.getElementById("SIGN-UPPER-BUTTON").style.display = "block";
            document.getElementById("PROFILE-WRAPPER").style.display = "none";
        } else {
            document.getElementById("PROFILE-WRAPPER").style.display = "flex";
            document.getElementById("NEW-POST-WRAPPER").style.display = "block";
            document.getElementById("SIGN-TEXT").style.display = "flex";
            document.getElementById("SIGN-UPPER-BUTTON").style.display = "none";

            document.getElementById("SIGN-TEXT-NAME").innerHTML = this._user.name;

            document.getElementById("PROFILE-PICTURE").setAttribute("src", this._user.photoLink);
            document.getElementById("PROFILE-NAME").innerHTML = this._user.name;
        }
    }

    changeUser(newUser) {
        this._user = newUser;
        this.drawUser();
        this.drawPosts(this._manager.getPage());
    }

    removePost(id) {
        if (this._manager.getPost(id).author.id == this._user.id) {
            this._manager.removePost(id);
            this.drawPosts(this._manager.getPage());
            return true;
        } else {
            return false;
        }
    }

    editPost(id, edit) {
        if (this._manager.getPost(id).author.id == this._user.id) {
            this._manager.editPost(id, edit);
            this.drawPosts(this._manager.getPage());
            return true;
        } else {
            return false;
        }
    }

    addPost(post) {
        this._manager.addPost(post);
        this.drawPosts(this._manager.getPage());
    }

    clear() {
        var postsDiv = document.getElementById("POSTS");

        while (postsDiv.firstChild) {
            postsDiv.removeChild(postsDiv.firstChild);
        }

        manager.clear();
    }
}



// –≠—Ç–∏ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤—Å—è–∫–∏—Ö —à—Ç—É–∫.
// –ö—Ä–æ–º–µ —Ç–æ–≥–æ, inspector –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ [Logged off].
var manager = new PostManager(posts);
var inspector = new Inspector(manager, new Author());

// –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–Ω —é–∑–µ—Ä–∞. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–ø–∏—Å–∞–Ω—ã –Ω–∞—à–∏–º –∑–∞–ª–æ–≥–∏–Ω–µ–Ω—ã–º –∞–≤—Ç–æ—Ä–æ–º, –¥–æ–ª–∂–Ω—ã —Å—Ç–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è.
inspector.changeUser(authors[2]);

// –ß–∏—Å—Ç–∏–º –≤—Å–µ –ø–æ—Å—Ç—ã, —á—Ç–æ–±—ã –±—ã–ª–æ –Ω—è–≥–ª—è–¥–Ω–µ–µ –ø–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.
inspector.clear();


// –î–æ–±–∞–≤–∏–º —Ç—Ä–∏ –ø–æ—Å—Ç–∞. –û–Ω–∏ –±—É–¥—É—Ç —Å—Ä–∞–∑—É –∂–µ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏.
inspector.addPost(new Post(34, "–ü–µ—Ä–≤—ã–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç.", new Date("2019-01-25T20:41:36"), authors[6], ["add-1-hashtag-1"], []));
inspector.addPost(new Post(35, "–í—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç.", new Date("2018-04-20T10:50:25"), authors[2], ["add-2-hashtag-1", "add-2-hashtag-2", "add-2-hashtag-3"], [authors[5], authors[2]]));
inspector.addPost(new Post(36, "–¢—Ä–µ—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç.", new Date("2017-10-17T04:50:51"), authors[2], ["add-3-hashtag-1", "add-3-hashtag-2"], [authors[1], authors[4]]));


// –¢–µ–ø–µ—Ä—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º "–í—Ç–æ—Ä–æ–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç" (–ø–æ—Å—Ç —Å ID 35).
inspector.editPost(35, {"text": "–ú—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤—Ç–æ—Ä–æ–π –ø–æ—Å—Ç –∏ —Ç–µ–ø–µ—Ä—å –æ–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∏–Ω–∞—á–µ.", "hashtags": ["EDIT-HASHTAG-1", "EDIT-HASHTAG-2"]});

// –¢–µ–ø–µ—Ä—å —É–¥–∞–ª–∏–º "–¢—Ä–µ—Ç–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç" (–ø–æ—Å—Ç —Å ID 36).
inspector.removePost(36);

// –ù—É —Ç—É—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≥–æ, —á—Ç–æ –º—ã –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å –ø–æ—Å—Ç, –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—â–∏–π –Ω–∞–º, —Ö–æ—Ç—è –Ω–µ –∑–Ω–∞—é, –∑–∞—á–µ–º —ç—Ç–æ. 
inspector.removePost(34);

// –ê —Ç–µ–ø–µ—Ä—å –ª–æ–≥–æ—Ñ–Ω–µ–º—Å—è.
inspector.changeUser(new Author());